#!/usr/bin/env bash
set -euo pipefail

# ---------- paths ----------
REPO="${REPO:-$HOME/redmine-n8n/mem-agent-mcp}"
UV_BIN="${UV_BIN:-$HOME/.local/bin/uv}"
LMS_BIN="${LMS_BIN:-$HOME/.lmstudio/bin/lms}"

# ---------- env ----------
export PATH="/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/.local/bin"
export LMSTUDIO_BASE_URL="${LMSTUDIO_BASE_URL:-http://127.0.0.1:8000}"
export MEM_AGENT_MODEL="${MEM_AGENT_MODEL:-mem-agent-mlx}"     # target model id
export LMS_MODEL="${LMS_MODEL:-$MEM_AGENT_MODEL}"
export LMSTUDIO_MODEL="${LMSTUDIO_MODEL:-$MEM_AGENT_MODEL}"

# Memory root (SilverBullet-backed)
export MEMORY_DIR="${MEMORY_DIR:-$HOME/redmine-n8n/data/notes/MusaiMemory}"
export MEMORY_PATH="$MEMORY_DIR"
export MEM_AGENT_MEMORY_DIR="$MEMORY_DIR"

# ---------- sanity ----------
if ! command -v jq >/dev/null 2>&1; then
  echo "[MCP] ERROR: jq is required (brew install jq)"; exit 127
fi

if [ ! -x "$UV_BIN" ]; then
  UV_BIN="$(command -v uv || true)"
fi
if [ -z "${UV_BIN:-}" ] || [ ! -x "$UV_BIN" ]; then
  echo "[MCP] ERROR: uv not found on PATH"; exit 127
fi

mkdir -p "$MEMORY_DIR/entities"
[ -f "$MEMORY_DIR/user.md" ] || printf "# User Information\n\n## User Relationships\n" > "$MEMORY_DIR/user.md"

# Silence memory warning by pointing repo fallback to the real dir
mkdir -p "$REPO/memory"
ln -snf "$MEMORY_DIR" "$REPO/memory/mcp-server" || true

# ---------- helpers ----------
have_model() {
  /usr/bin/curl -fsS "$LMSTUDIO_BASE_URL/v1/models" \
    | jq -e --arg m "$MEM_AGENT_MODEL" '.data[].id == $m' >/dev/null
}

wait_for_api() {
  local url="${LMSTUDIO_BASE_URL:-http://127.0.0.1:8000}"
  local CURL="/usr/bin/curl -fsS --max-time 3"
  echo "[MCP] Waiting for LM Studio at $url ..."
  for _ in {1..60}; do
    if $CURL "$url/v1/models" >/dev/null 2>&1; then
      echo "[MCP] LM Studio is up."
      return 0
    fi
    /bin/sleep 2
  done
  echo "[MCP] ERROR: LM Studio API not reachable."
  return 1
}

wait_for_model() {
  local url="${LMSTUDIO_BASE_URL:-http://127.0.0.1:8000}"
  local model="${MEM_AGENT_MODEL:-mem-agent-mlx}"
  local CURL="/usr/bin/curl -sS --max-time 4 -H Content-Type:application/json"

  echo "[MCP] Warming up model: $model"
  # Fire a tiny completion to trigger load (ignore body)
  $CURL -d "{\"model\":\"$model\",\"messages\":[{\"role\":\"user\",\"content\":\"ping\"}],\"max_tokens\":1}" \
    "$url/v1/chat/completions" >/dev/null 2>&1 || true

  # Verify it responds without model_not_found
  for _ in {1..20}; do
    # Ask for 1 token and capture HTTP code
    local code
    code=$(/usr/bin/curl -sS -o /dev/null -w '%{http_code}' \
      -H 'Content-Type: application/json' \
      -d "{\"model\":\"$model\",\"messages\":[{\"role\":\"user\",\"content\":\"ok\"}],\"max_tokens\":1}" \
      "$url/v1/chat/completions" || echo "000")

    if [ "$code" = "200" ]; then
      echo "[MCP] Model $model is responding."
      return 0
    fi
    /bin/sleep 1
  done

  echo "[MCP] ERROR: Model $model did not come ready."
  return 1
}

ensure_model_loaded() {
  # If already listed, great.
  if have_model; then
    echo "[MCP] Model '$MEM_AGENT_MODEL' already loaded."
    return 0
  fi

  # Try via CLI if present
  if [ -x "$LMS_BIN" ]; then
    echo "[MCP] Loading model via LMS CLI: $MEM_AGENT_MODEL ..."
    "$LMS_BIN" load "$MEM_AGENT_MODEL" || true
  else
    echo "[MCP] LMS CLI not found at $LMS_BIN; skipping CLI load."
  fi

  # Wait until it shows up (max ~90s)
  for _ in {1..45}; do
    if have_model; then
      echo "[MCP] Model '$MEM_AGENT_MODEL' is now loaded."
      return 0
    fi
    /bin/sleep 2
  done

  echo "[MCP] WARNING: '$MEM_AGENT_MODEL' not listed after waiting. MCP will still start; LM Studio may JIT-load on first call."
  return 0
}

wait_port_free() {
  local port="${1:-8081}"
  for _ in {1..30}; do
    if ! /usr/sbin/lsof -nP -iTCP:"$port" -sTCP:LISTEN >/dev/null 2>&1; then
      return 0
    fi
    echo "[MCP] Port $port busy; waiting..."
    /bin/sleep 1
  done
  echo "[MCP] ERROR: Port $port still in use; aborting."
  exit 48
}

# ---------- sequence ----------
wait_for_api
ensure_model_loaded
wait_port_free 8081

echo "üåê Starting MCP-Compliant HTTP Server for ChatGPT..."
echo "üîó MCP endpoint: http://localhost:8081/mcp"

cd "$REPO"
exec "$UV_BIN" run python "$REPO/mcp_server/mcp_http_server.py" --host 0.0.0.0 --port 8081
